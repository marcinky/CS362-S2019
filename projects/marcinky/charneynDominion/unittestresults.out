
----------------- Testing Card: adventurer ----------------

	TEST: Refactored Function
	hand count = -697, expected = 7
	deck count = 2, expected = 3

 >>>>>  TEST FAILED  <<<<<
  item: (testG.handCount[thisPlayer] - newCards == G.handCount[thisPlayer] + newCards)
  function: main
  file: unittest1.c
  line: 65

 >>>>>  TEST FAILED  <<<<<
  item: (testG.deckCount[thisPlayer] + newCards == G.deckCount[thisPlayer] - newCards)
  function: main
  file: unittest1.c
  line: 67


 >>>>> Testing complete for: adventurer <<<<<


----------------- Testing Card: council_room ----------------

	TEST 2: Refactored Function
	hand count = 7, expected = 8
	deck count = 2, expected = 1
	buy count  = 2, expected = 2

	Next Player
	hand count = 1, expected = 1
	deck count = 9, expected = 9

 >>>>>  TEST FAILED  <<<<<
  item: (testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
  function: main
  file: unittest2.c
  line: 77

 >>>>>  TEST FAILED  <<<<<
  item: (testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards)
  function: main
  file: unittest2.c
  line: 79

 >>>>>  TEST PASSED  <<<<<
  item: (testG.numBuys == G.numBuys + buy)

 >>>>>  TEST PASSED  <<<<<
  item: (testG.handCount[nextPlayer] == G.handCount[nextPlayer] + 1)

 >>>>>  TEST PASSED  <<<<<
  item: (testG.deckCount[nextPlayer] == G.deckCount[nextPlayer] - 1)


 >>>>> Testing complete for: council_room <<<<<


----------------- Testing Card: smithy ----------------

  TEST: Refactored Function (very slow, but works)
	hand count = 8, expected = 8
	actions    = 1, expected = 1

 >>>>>  TEST PASSED  <<<<<
  item: (testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards)

 >>>>>  TEST PASSED  <<<<<
  item: (testG.numActions == G.numActions)


 >>>>> Testing complete for: smithy <<<<<


----------------- Testing Card: village ----------------

	TEST: Refactored Function
	hand count = 5, expected = 6
	deck count = 4, expected = 3
	discarded  = 0, expected = 1
	actions    = 4, expected = 3

 >>>>>  TEST FAILED  <<<<<
  item: (testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards)
  function: main
  file: unittest4.c
  line: 70

 >>>>>  TEST PASSED  <<<<<
  item: (testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - discarded + shuffledCards)

 >>>>>  TEST FAILED  <<<<<
  item: (testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] + discarded)
  function: main
  file: unittest4.c
  line: 74

 >>>>>  TEST FAILED  <<<<<
  item: (testG.numActions == G.numActions + actions)
  function: main
  file: unittest4.c
  line: 75


 >>>>> Testing complete for: village <<<<<


----------------- Testing Card: smithy ----------------

  TEST 1: Testing in cardEffect (very slow, but works)
  *Tests to ensure the function discards.
	hand count = 8, expected = 8
	discarded  = 0, expected = 1
	actions    = 1, expected = 1

 >>>>>  TEST PASSED  <<<<<
  item: (testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards)

 >>>>>  TEST FAILED  <<<<<
  item: (testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards)
  function: main
  file: cardtest2.c
  line: 62

 >>>>>  TEST PASSED  <<<<<
  item: (testG.numActions == G.numActions)


 >>>>> Testing complete for: smithy <<<<<

----------------- Testing Card: great_hall ----------------
  TEST: Expecting to gain 1 card to hand count and 1 action.
	hand count = 5, expected = 6
	deck count = 4, expected = 4
	actions    = 2, expected = 2
	discarded  = 0, expected = 1

 >>>>>  TEST PASSED  <<<<<
  item: (testG.handCount[thisPlayer] == G.handCount[thisPlayer])

 >>>>>  TEST PASSED  <<<<<
  item: (testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards)

 >>>>>  TEST FAILED  <<<<<
  item: (testG.numActions == G.numActions)
  function: main
  file: cardtest3.c
  line: 64

 >>>>>  TEST FAILED  <<<<<
  item: (testG.discardCount[thisPlayer] == G.discardCount[thisPlayer]+1)
  function: main
  file: cardtest3.c
  line: 65


 >>>>> Testing complete for: great_hall <<<<<

----------------- Testing Card: minion ----------------
TEST 1: choice1 = 1 = +2 coins
hand count = 4, expected = 4
deck count = 5, expected = 5
coin count = 6, expected = 6

 >>>>>  TEST PASSED  <<<<<
  item: (testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)

 >>>>>  TEST PASSED  <<<<<
  item: (testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards)

 >>>>>  TEST PASSED  <<<<<
  item: (testG.coins == G.coins + xtraCoins)


TEST 2: choice2  = +4 cards
hand count = 4, expected = 8
deck count = 1, expected = 1
coin count = 4, expected = 4

 >>>>>  TEST FAILED  <<<<<
  item: (testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
  function: main
  file: cardtest4.c
  line: 95

 >>>>>  TEST PASSED  <<<<<
  item: (testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards)

 >>>>>  TEST PASSED  <<<<<
  item: (testG.coins == G.coins + xtraCoins)


 >>>>> Testing complete for: minion <<<<<


---------- Begin Random Test for Card: council_room ----------

 council_room Run#0 numPlayers: 2
 #buys count 0, expected 1

 >>>>> [council_room card] TEST FAILED <<<<<

File 'unittest1.c'
Lines executed:100.00% of 22
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:83.33% of 12
Creating 'unittest1.c.gcov'

File 'unittest2.c'
Lines executed:100.00% of 34
Branches executed:100.00% of 10
Taken at least once:50.00% of 10
Calls executed:77.27% of 22
Creating 'unittest2.c.gcov'

File 'unittest3.c'
Lines executed:100.00% of 20
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:83.33% of 12
Creating 'unittest3.c.gcov'

File 'unittest4.c'
Lines executed:100.00% of 31
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:77.78% of 18
Creating 'unittest4.c.gcov'

File 'cardtest1.c'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:81.25% of 16
Creating 'cardtest1.c.gcov'

File 'cardtest2.c'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:81.25% of 16
Creating 'cardtest2.c.gcov'

File 'cardtest3.c'
Lines executed:100.00% of 28
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:77.78% of 18
Creating 'cardtest3.c.gcov'

File 'cardtest4.c'
Lines executed:100.00% of 45
Branches executed:100.00% of 12
Taken at least once:50.00% of 12
Calls executed:77.78% of 27
Creating 'cardtest4.c.gcov'

File 'randomtestadventurer.c'
Lines executed:82.50% of 40
Branches executed:75.00% of 8
Taken at least once:50.00% of 8
Calls executed:81.25% of 16
Creating 'randomtestadventurer.c.gcov'

File 'randomtestcard1.c'
Lines executed:76.32% of 38
Branches executed:75.00% of 8
Taken at least once:37.50% of 8
Calls executed:75.00% of 16
Creating 'randomtestcard1.c.gcov'

File 'randomtestcard2.c'
Lines executed:67.50% of 40
Branches executed:50.00% of 8
Taken at least once:25.00% of 8
Calls executed:68.75% of 16
Creating 'randomtestcard2.c.gcov'

