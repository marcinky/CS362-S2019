        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/**********************************************************************
        -:    2: ** Program: randomtestcard1.c
        -:    3: ** Author: Yvonne Marcinko
        -:    4: ** Date: 5/19/2019
        -:    5: ** Description: random test for dominion.c village implementation 
        -:    6: **		from assignment 3. Expected behavior: +1 card, +2 actions
        -:    7: *********************************************************************/
        -:    8:
        -:    9:#include"dominion.h"
        -:   10:#include"dominion_helpers.h"
        -:   11:#include"rngs.h"
        -:   12:#include<assert.h>
        -:   13:#include<stdio.h>
        -:   14:#include<stdlib.h>
        -:   15:#include<string.h>
        -:   16:#include<time.h>
        -:   17:
        -:   18:#define TESTCARD "village"
        -:   19:#define MAX_RT 200
        -:   20:#define MAX_SD 100
        -:   21:#define PEEPS 4
        -:   22:
function printFail called 0 returned 0% blocks executed 0%
    #####:   23:void printFail()
        -:   24:{
    #####:   25:	printf("\n >>>>>  [%s card] TEST FAILED <<<<<\n\n", TESTCARD);
call    0 never executed
    #####:   26:	exit(200);
        -:   27:}
        -:   28:
        -:   29:
function main called 2 returned 100% blocks executed 87%
        2:   30:int main() 
        -:   31:{
        -:   32:	//set rand
        2:   33:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   34:	
        -:   35:	//variables
        2:   36:	int choice1=1, choice2=1, choice3=1;
        2:   37:	int handpos = 0;
        2:   38:	int bonus = 0;
        2:   39:	int thisPlayer = 0;
        -:   40:	int numPlayers, a, i, seed;
        2:   41:	int newCards = 1;	
        2:   42:	int usedCard = 2;
        -:   43:
        -:   44:	//create gamestate 
        -:   45:	struct gameState G, testG;
        -:   46:
        -:   47:	//each player starts with 10 cards
        2:   48:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, 
        -:   49:		sea_hag, tribute, smithy, council_room};
        -:   50:
        -:   51:	// -------------------- BEGIN RANDOM TEST -------------------- // 
        2:   52:	printf("\n---------- Begin Random Test for Card: %s ----------\n", TESTCARD);
call    0 returned 100%
        -:   53:	
        2:   54:	seed = rand();
call    0 returned 100%
        2:   55:	a = 0;
        -:   56:
      404:   57:	for(i = 0; i < MAX_RT + 1; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   58:	{	//randomize players  
      402:   59:		numPlayers = (rand() % PEEPS + 1);
call    0 returned 100%
        -:   60:
      402:   61:		printf("\n %s Run#%d numPlayers: %d", TESTCARD, a, numPlayers);
call    0 returned 100%
        -:   62:
        -:   63:		//initialize game state 
      402:   64:		initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   65:
        -:   66:		//copy the game state to a test case
      402:   67:		memcpy(&testG, &G, sizeof(struct gameState));
        -:   68:	
        -:   69:		//call card in function
      402:   70:		cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   71:
        -:   72:		//check actions executed
      402:   73:		printf("\n action count %d, expected %d\n",
call    0 returned 100%
        -:   74:			testG.numActions, 
        -:   75:			G.numActions);
        -:   76:
      402:   77:		if(testG.numActions != G.numActions)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:		{
    #####:   79:			printFail();
call    0 never executed
        -:   80:		}
        -:   81:	
        -:   82:		//check hand count
      804:   83:		printf(" hand count %d, expected %d\n",
call    0 returned 100%
      402:   84:			testG.handCount[thisPlayer] - usedCard - newCards, 
      402:   85:			G.handCount[thisPlayer] + newCards);
        -:   86:
      804:   87:		if(testG.handCount[thisPlayer] - usedCard - newCards != 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      402:   88:			G.handCount[thisPlayer] + newCards)
        -:   89:		{
    #####:   90:			printFail();
call    0 never executed
        -:   91:		}
        -:   92:
        -:   93:		//check discard count
      402:   94:		printf(" discard count %d, expected %d\n",
call    0 returned 100%
        -:   95:			testG.discardCount[thisPlayer],
      402:   96:			G.discardCount[thisPlayer] + newCards);
        -:   97:
      804:   98:		if(testG.discardCount[thisPlayer] != 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      402:   99:			G.discardCount[thisPlayer] + newCards)
        -:  100:		{
    #####:  101:			printFail();
call    0 never executed
        -:  102:		}
        -:  103:
      402:  104:		a++;
        -:  105:	}
        -:  106:
        -:  107:	//print success if test passed
        2:  108:	printf("\n >>>>> Random Testing PASSED for: %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:  109:
        2:  110:	return 0;
        -:  111:}
