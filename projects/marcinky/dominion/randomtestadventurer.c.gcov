        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/**********************************************************************
        -:    2: ** Program: randomtestadventurer.c
        -:    3: ** Author: Yvonne Marcinko
        -:    4: ** Date: 5/19/2019
        -:    5: ** Description: Random test for dominion.c adventurer implementation.
        -:    6: **		Expected behavior: +2 Treasure cards
        -:    7: **		Parameters: thisPlayer, gamestate, handpos, & temphand
        -:    8: *********************************************************************/
        -:    9:
        -:   10:#include"dominion.h"
        -:   11:#include"dominion_helpers.h"
        -:   12:#include"rngs.h"
        -:   13:#include<assert.h>
        -:   14:#include<stdio.h>
        -:   15:#include<stdlib.h>
        -:   16:#include<string.h>
        -:   17:#include<time.h>
        -:   18:
        -:   19:#define TESTCARD "adventurer"
        -:   20:#define MAX_RT 200
        -:   21:#define MAX_SD 100
        -:   22:#define PEEPS 4
        -:   23:			
function printFail called 0 returned 0% blocks executed 0%
    #####:   24:void printFail()
        -:   25:{
    #####:   26:	printf("\n >>>>>  [%s card] TEST FAILED  <<<<<\n\n", TESTCARD); 
call    0 never executed
    #####:   27:	exit(200);
        -:   28:}
        -:   29:
        -:   30:
function main called 2 returned 100% blocks executed 87%
        2:   31:int main() 
        -:   32:{
        -:   33:	//set rand
        2:   34:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   35:	
        -:   36:	//variables
        2:   37:	int choice1=1, choice2=1, choice3=1;
        2:   38:	int handpos = 0;
        2:   39:	int bonus = 0;
        2:   40:	int thisPlayer = 0;
        -:   41:	int numPlayers, a, i, seed;
        2:   42:	int newCards = 3;	//value 3 to account for bug (neg test), value 2 normal ops
        2:   43:	int usedCard = 1;
        -:   44:
        -:   45:	//create gamestate 
        -:   46:	struct gameState G, testG;
        -:   47:
        -:   48:	//each player starts with 10 cards
        2:   49:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, 
        -:   50:		sea_hag, tribute, smithy, council_room};
        -:   51:
        -:   52:	// -------------------- BEGIN RANDOM TEST -------------------- // 
        2:   53:	printf("\n---------- Begin Random Test for Card: %s ----------\n", TESTCARD);
call    0 returned 100%
        -:   54:	
        2:   55:	seed = rand();
call    0 returned 100%
        2:   56:	a = 0;
        -:   57:
      404:   58:	for(i = 0; i < MAX_RT + 1; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   59:	{	//randomize values 
      402:   60:		numPlayers = (rand() % PEEPS + 1);
call    0 returned 100%
        -:   61:
      402:   62:		printf("\n %s Run#%d numPlayers: %d", TESTCARD, a, numPlayers);
call    0 returned 100%
        -:   63:
        -:   64:		//initialize game state 
      402:   65:		initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   66:
        -:   67:		//copy the game state to a test case
      402:   68:		memcpy(&testG, &G, sizeof(struct gameState));
        -:   69:	
        -:   70:		//call card in function
      402:   71:		cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   72:
        -:   73:		//check deck count
      804:   74:		printf("\n deck count %d, expected %d\n",
call    0 returned 100%
      402:   75:			testG.deckCount[thisPlayer] + newCards + usedCard, 
      402:   76:			G.deckCount[thisPlayer] - usedCard);
        -:   77:
      804:   78:		if(testG.deckCount[thisPlayer] + newCards + usedCard != 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      402:   79:			G.deckCount[thisPlayer] - usedCard)
        -:   80:		{
    #####:   81:			printFail();
call    0 never executed
        -:   82:		}
        -:   83:	
        -:   84:		//check hand count
      804:   85:		printf(" hand count %d, expected %d\n",
call    0 returned 100%
      402:   86:			testG.handCount[thisPlayer] - usedCard, 
      402:   87:			G.handCount[thisPlayer] + newCards);
        -:   88:
      804:   89:		if(testG.handCount[thisPlayer] - usedCard != 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      402:   90:			G.handCount[thisPlayer] + newCards)
        -:   91:		{
    #####:   92:			printFail();
call    0 never executed
        -:   93:		}
        -:   94:
        -:   95:		//check discard count
      402:   96:		printf(" discard count %d, expected %d\n",
call    0 returned 100%
        -:   97:			testG.discardCount[thisPlayer], 
      402:   98:			G.discardCount[thisPlayer] + usedCard);
        -:   99:
      402:  100:		if(testG.discardCount[thisPlayer] != G.discardCount[thisPlayer] + usedCard)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  101:		{
    #####:  102:			printFail();
call    0 never executed
        -:  103:		}
      402:  104:		a++;
        -:  105:	}
        -:  106:
        -:  107:	//print success if test passed
        2:  108:	printf("\n >>>>> Random Testing PASSED for: %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:  109:
        2:  110:	return 0;
        -:  111:}
